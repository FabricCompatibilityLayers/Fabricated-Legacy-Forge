import com.diffplug.gradle.spotless.JavaExtension

plugins {
	id 'com.diffplug.spotless' version "6.12.0"
	id 'fabric-loom' version "1.0-SNAPSHOT" // To use chocoloom, change the version to a commit hash
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name + "-" + project.minecraft_version
version = project.mod_version
group = project.maven_group

repositories {
	maven {
		name = "legacy-fabric"
		url = "https://repo.legacyfabric.net/repository/legacyfabric"
	}
	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
		content {
			includeGroup "maven.modrinth"
		}
	}
	flatDir {
		dirs "./lib"
	}

	maven {
		name = "Jitpack"
		url 'https://jitpack.io/'
	}
}

loom {
	setIntermediaryUrl('https://repo.legacyfabric.net/repository/legacyfabric/net/legacyfabric/intermediary/%1$s/intermediary-%1$s-v2.jar');

	accessWidenerPath = file("src/main/resources/fabricated-forge.accesswidener")
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.legacyfabric:yarn:${project.minecraft_version}+build.${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modApi("maven.modrinth:mod-remapping-api:${project.mod_remapping_api}")

	modImplementation("net.legacyfabric.legacy-fabric-api:legacy-fabric-logger-api-v1:${project.logger_api}")

	implementation(include(group: "local", name: "argo", version: "2.25"))
	implementation(include(group: "local", name: "guava", version: "12.0.1"))

	modRuntimeOnly(files("./forge-${project.minecraft_version}-${project.forge_version}-universal-intermediary.jar"))

	if (System.getProperty("os.name").toLowerCase().contains("mac")) {
		implementation 'org.lwjgl.lwjgl:lwjgl_util:2.9.4-nightly-20150209'
		implementation 'org.lwjgl.lwjgl:lwjgl:2.9.4-nightly-20150209'
		implementation 'org.lwjgl.lwjgl:lwjgl-platform:2.9.4-nightly-20150209'
	}
}

if (System.getProperty("os.name").toLowerCase().contains("mac")) {
	configurations.all {
		resolutionStrategy {
			dependencySubstitution {
				substitute module('org.lwjgl.lwjgl:lwjgl_util:2.9.2-nightly-201408222') with module('org.lwjgl.lwjgl:lwjgl_util:2.9.4-nightly-20150209')
				substitute module('org.lwjgl.lwjgl:lwjgl:2.9.2-nightly-201408222') with module('org.lwjgl.lwjgl:lwjgl:2.9.4-nightly-20150209')
			}
			force 'org.lwjgl.lwjgl:lwjgl-platform:2.9.4-nightly-20150209'
		}
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	if (JavaVersion.current().isJava9Compatible()) it.options.release = 8
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("licensing.md")
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}" }
	}
	from("LICENSE-fml.txt")
	from("CREDITS-fml.txt")
	from("MinecraftForge-Credits.txt")
	from("MinecraftForge-License.txt")
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}

spotless {
	format('fml', JavaExtension) {
		licenseHeaderFile(rootProject.file("HEADER_FML"))
		target 'src/*/java/cpw/mods/**/*.java'
		target 'src/*/java/net/minecraft/*.java'
	}

	format('forge', JavaExtension) {
		licenseHeaderFile(rootProject.file("HEADER_FORGE"))
		target 'src/*/java/net/minecraftforge/**/*.java'
	}
}

import com.diffplug.gradle.spotless.JavaExtension

plugins {
	id 'java-library'
	id 'com.diffplug.spotless' version "6.12.0"
	id 'fabric-loom' version "1.3-SNAPSHOT" apply false // To use chocoloom, change the version to a commit hash
	id 'legacy-looming' version "1.3-SNAPSHOT" apply false // Version must be the same as fabric-loom's
	id 'maven-publish'
	id "com.modrinth.minotaur" version "2.+"
}

def displayVersion = project.mod_version + "+" + project.minecraft_version

def debug = true
def branch = System.getenv("GITHUB_REF_NAME") == null ? "-forge" : System.getenv("GITHUB_REF_NAME")
if (!branch.endsWith("-forge")) {
	debug = false
}

allprojects {
	apply plugin: "maven-publish"
	apply plugin: "java-library"
	apply plugin: "fabric-loom"
	apply plugin: "legacy-looming"

	version = project.mod_version
	group = project.maven_group

	repositories {
		maven {
			name = "Modrinth"
			url = "https://api.modrinth.com/maven"
			content {
				includeGroup "maven.modrinth"
			}
		}
		flatDir {
			dirs (rootProject.rootDir.toString() + "/lib", rootProject.rootDir.toString() + "/mods")
		}

		maven {
			name = "Jitpack"
			url 'https://jitpack.io/'
		}
	}

	dependencies {
		minecraft "com.mojang:minecraft:${project.minecraft_version}"
		mappings legacy.yarn(project.minecraft_version, project.yarn_mappings)
		modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

		modApi("maven.modrinth:mod-remapping-api:${project.mod_remapping_api}")
	//	modApi(group: "local", name: "mod-remapping-api", version: "1.8.0")

		modApi("maven.modrinth:spasm:${project.spasm_version}")
		modApi(annotationProcessor("com.github.LlamaLad7.MixinExtras:mixinextras-fabric:${project.mixin_extras_version}"))

		implementation(group: "local", name: "argo", version: "2.25")
		implementation(group: "local", name: "guava", version: "12.0.1")

		modImplementation(legacy.apiModule("legacy-fabric-logger-api-v1", "1.9.0+1.8.9"))
	}

	processResources {
		inputs.property "version", project.version

		filesMatching("fabric.mod.json") {
			expand "version": project.version
		}
	}

	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	tasks.withType(JavaCompile).configureEach {
		it.options.encoding = "UTF-8"
		if (JavaVersion.current().isJava9Compatible()) it.options.release = 8

		sourceCompatibility = JavaVersion.VERSION_1_8
		targetCompatibility = JavaVersion.VERSION_1_8
	}

	java {
		// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
		// if it is present.
		// If you remove this line, sources will not be generated.
		withSourcesJar()
	}

	jar {
		from("LICENSE") {
			rename { "${it}_${base.archivesName.get()}" }
		}
	}
}

base {
	archivesName = project.archives_base_name + "-" + project.minecraft_version
}

loom {
	accessWidenerPath = file("src/main/resources/fabricated-forge.accesswidener")
}

dependencies {
	include(group: "local", name: "argo", version: "2.25")
	include(group: "local", name: "guava", version: "12.0.1")

	include("org.apache.commons:commons-lang3:3.12.0")

//	modRuntimeOnly(files("./forge-${project.minecraft_version}-${project.forge_version}-universal-intermediary.jar"))
}

subprojects {
	dependencies {
		api(project.dependencies.project(path: ":", configuration: 'namedElements'))
	}
}

remapJar {
	afterEvaluate {
		subprojects.each {
			// Include the jar from the sub project.
			nestedJars.from project("${it.path}").tasks.getByName("remapJar")
		}
	}
}

jar {
	from("licensing.md")
	from("LICENSE-fml.txt")
	from("CREDITS-fml.txt")
	from("MinecraftForge-Credits.txt")
	from("MinecraftForge-License.txt")
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}

spotless {
	format('fml', JavaExtension) {
		licenseHeaderFile(rootProject.file("HEADER_FML"))
		target 'src/*/java/cpw/mods/**/*.java', 'src/*/java/net/minecraft/*.java'
	}

	format('forge', JavaExtension) {
		licenseHeaderFile(rootProject.file("HEADER_FORGE"))
		target 'src/*/java/net/minecraftforge/**/*.java'
	}
}

modrinth {
	token = System.getenv("MODRINTH_TOKEN") == null ? "dev" : System.getenv("MODRINTH_TOKEN") // This is the default. Remember to have the MODRINTH_TOKEN environment variable set or else this will fail, or set it to whatever you want - just make sure it stays private!
	projectId = "JpHZ1Cyv" // This can be the project ID or the slug. Either will work!
	versionName = displayVersion
	changelog = "Update to MRAPI 1.14.2.\nFix more compatibility issues with CodeChickenCore and NEI.\nNEI plugins still do not work for now."
	uploadFile = remapJar
	gameVersions = [project.minecraft_version] // Must be an array, even with only one version
	debugMode = debug
	dependencies { // A special DSL for creating dependencies
		// scope.type
		// The scope can be `required`, `optional`, `incompatible`, or `embedded`
		// The type can either be `project` or `version`
		required.version "mod-remapping-api", project.mod_remapping_api
	}
}
